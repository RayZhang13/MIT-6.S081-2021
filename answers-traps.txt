Q1: Which registers contain arguments to functions? For example, which register holds 13 in main's call to printf?
A: Registers a0~a7 are used to pass arguments to functions. In the following example, register a2 holds 13 as it's the third argument.

Q2: Where is the call to function f in the assembly code for main? Where is the call to g? (Hint: the compiler may inline functions.)
A: There is no call to function f or g in assembly code for main, as the complier inlines fuctions and compute the result f(8) + 1 = 12, then regard it as an immediate number.

Q3: At what address is the function printf located?
A: 0x616

Q4: What value is in the register ra just after the jalr to printf in main?
A: 0x38, which is the address of the next instruction of jalr

Q5: Run the following code.
	unsigned int i = 0x00646c72;
	printf("H%x Wo%s", 57616, &i);
What is the output? Here's an ASCII table that maps bytes to characters.
The output depends on that fact that the RISC-V is little-endian. If the RISC-V were instead big-endian what would you set i to in order to yield the same output?
 Would you need to change 57616 to a different value?
A: The output is "HE110 World", because hex of 57616 is "e110", and 0x72, 0x6c, 0x64 is the ASCII of r, l, d.
 If the RISC-V were instead big-endian, i should be set to 0x726c6400. Meanwhile, there's no need to change 57516.

Q6: In the following code, what is going to be printed after 'y='? (note: the answer is not a specific value.) Why does this happen?
	printf("x=%d y=%d", 3);
A: The code is going to print the value of a2 register after 'y=', which is not specific.